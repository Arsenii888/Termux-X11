plugins {
    id "com.android.application"
}

android {
    compileSdkVersion project.properties.compileSdkVersion.toInteger()
    ndkVersion = System.getenv("JITPACK_NDK_VERSION") ?: project.properties.ndkVersion
    def appVersionName = System.getenv("TERMUX_APP_VERSION_NAME") ?: ""
    def apkVersionTag = System.getenv("TERMUX_APK_VERSION_TAG") ?: ""
    def splitAPKsForDebugBuilds = System.getenv("TERMUX_SPLIT_APKS_FOR_DEBUG_BUILDS") ?: "1"
    def splitAPKsForReleaseBuilds = System.getenv("TERMUX_SPLIT_APKS_FOR_RELEASE_BUILDS") ?: "0" // F-Droid does not support split APKs #1904

    dependencies {

        implementation "androidx.annotation:annotation:1.3.0"
        implementation "androidx.core:core:1.6.0"
        implementation "androidx.drawerlayout:drawerlayout:1.1.1"
        implementation "androidx.preference:preference:1.1.1"
        implementation "androidx.viewpager:viewpager:1.0.0"
        implementation "com.google.guava:guava:24.1-jre"
        implementation "io.noties.markwon:core:$markwonVersion"
        implementation "io.noties.markwon:ext-strikethrough:$markwonVersion"
        implementation "io.noties.markwon:linkify:$markwonVersion"
        implementation "io.noties.markwon:recycler:$markwonVersion"

        implementation project(":terminal-view")
        implementation project(":termux-shared")
    }

    defaultConfig {
        applicationId "com.termux"
        minSdkVersion project.properties.minSdkVersion.toInteger()
        targetSdkVersion project.properties.targetSdkVersion.toInteger()
        versionCode 1000
        versionName "0.118.1"

        if (appVersionName) versionName = appVersionName
        validateVersionName(versionName)

        manifestPlaceholders.TERMUX_PACKAGE_NAME = "com.termux"
        manifestPlaceholders.TERMUX_APP_NAME = "Termux"
        manifestPlaceholders.TERMUX_API_APP_NAME = "Termux:API"
        manifestPlaceholders.TERMUX_BOOT_APP_NAME = "Termux:Boot"
        manifestPlaceholders.TERMUX_FLOAT_APP_NAME = "Termux:Float"
        manifestPlaceholders.TERMUX_STYLING_APP_NAME = "Termux:Styling"
        manifestPlaceholders.TERMUX_TASKER_APP_NAME = "Termux:Tasker"
        manifestPlaceholders.TERMUX_WIDGET_APP_NAME = "Termux:Widget"

        externalNativeBuild {
            ndkBuild {
                cFlags "-std=c11", "-Wall", "-Wextra", "-Werror", "-Os", "-fno-stack-protector", "-Wl,--gc-sections"
            }
        }

        splits {
            abi {
                enable ((gradle.startParameter.taskNames.any { it.contains("Debug") } && splitAPKsForDebugBuilds == "1") ||
                    (gradle.startParameter.taskNames.any { it.contains("Release") } && splitAPKsForReleaseBuilds == "1"))
                reset ()
                include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
                universalApk true
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file('dev_keystore.jks')
            keyAlias 'alias'
            storePassword 'xrj45yWGLbsO7W0v'
            keyPassword 'xrj45yWGLbsO7W0v'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources false // Reproducible builds
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }

    lintOptions {
        disable 'ProtectedPermissions'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "debug") {
                def abi = output.getFilter(com.android.build.OutputFile.ABI)
                outputFileName = new File("termux-app_" + (apkVersionTag ? apkVersionTag : "debug") + "_" + (abi ? abi : "universal") + ".apk")
            } else if (variant.buildType.name == "release") {
                def abi = output.getFilter(com.android.build.OutputFile.ABI)
                outputFileName = new File("termux-app_" + (apkVersionTag ? apkVersionTag : "release") + "_" + (abi ? abi : "universal") + ".apk")
            }
        }
    }

}

dependencies {
    implementation project(':shell-loader:stub')
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.robolectric:robolectric:4.4"

}

task versionName {
    doLast {
        print android.defaultConfig.versionName
    }
}

def validateVersionName(String versionName) {
    // https://semver.org/spec/v2.0.0.html#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
    // ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
    if (!java.util.regex.Pattern.matches("^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?\$", versionName))
        throw new GradleException("The versionName '"  + versionName + "' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.")
}

def downloadBootstrap(String arch, String expectedChecksum, String version) {

    def digest = java.security.MessageDigest.getInstance("SHA-256")

    def localUrl = "src/main/cpp/bootstrap-" + arch + ".zip"
    def file = new File(projectDir, localUrl)
    if (file.exists()) {
        def buffer = new byte[8192]
        def input = new FileInputStream(file)
        while (true) {
            def readBytes = input.read(buffer)
            if (readBytes < 0) break
            digest.update(buffer, 0, readBytes)
        }
        def checksum = new BigInteger(1, digest.digest()).toString(16)
        while (checksum.length() < 64) { checksum = "0" + checksum }
        if (checksum == expectedChecksum) {
            return
        } else {
            logger.quiet("Deleting old local file with wrong hash: " + localUrl)
            file.delete()
        }
    }

    def remoteUrl = "https://github.com/termux/termux-packages/releases/download/bootstrap-" + version + "/bootstrap-" + arch + ".zip"
    logger.quiet("Downloading " + remoteUrl + " ...")

    file.parentFile.mkdirs()
    def out = new BufferedOutputStream(new FileOutputStream(file))

    def connection = new URL(remoteUrl).openConnection()
    connection.setInstanceFollowRedirects(true)
    def digestStream = new java.security.DigestInputStream(connection.inputStream, digest)
    out << digestStream
    out.close()

    def checksum = new BigInteger(1, digest.digest()).toString(16)
    while (checksum.length() < 64) { checksum = "0" + checksum }
    if (checksum != expectedChecksum) {
        file.delete()
        throw new GradleException("Wrong checksum for " + remoteUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
    }
}

clean {
    doLast {
        def tree = fileTree(new File(projectDir, 'src/main/cpp'))
        tree.include 'bootstrap-*.zip'
        tree.each { it.delete() }
    }
}

task downloadBootstraps() {
    return;
    doLast {
        def version = "2024.06.17-r1+apt-android-7"
        downloadBootstrap("aarch64", "91a90661597fe14bb3c3563f5f65b243c0baaec42f2bc3d2243ff459e3942fb6", version)
        downloadBootstrap("arm",     "d54b5eb2a305d72f267f9704deaca721b2bebbd3d4cca134aec31da719707997", version)
        downloadBootstrap("i686",    "06a51ac1c679d68d52045509f1a705622c8f41748ef753660e31e3b6a846eba2", version)
        downloadBootstrap("x86_64",  "4c8e43474c8d9543e01d4cbf3c4d7f59bbe4d696c38f6dece2b6ab3ba8881f2e", version)
    }
}

afterEvaluate {
    tasks.register("generatePrefs") {
        //noinspection UnnecessaryQualifiedReference
        def xml = groovy.xml.DOMBuilder.parse((new StringReader(file('src/main/res/xml/preferences.xml').text)))
        def preferenceNodes = xml.documentElement.getElementsByTagName("*")
        def preferences = []

        for (int i = 0; i < preferenceNodes.length; i++) {
            def node = preferenceNodes.item(i)
            if (node.nodeName == 'EditTextPreference' && node.getAttribute("app:key") != "extra_keys_config")
                preferences << [ type: 'String',  key: node.getAttribute("app:key"), default: node.getAttribute("app:defaultValue") ]
            else if (node.nodeName == 'SeekBarPreference')
                preferences << [ type: 'Int', key: node.getAttribute("app:key"), default: node.getAttribute("app:defaultValue") ]
            else if (node.nodeName == 'ListPreference') {
                def entries = node.getAttribute("app:entries")
                def values = node.getAttribute("app:entryValues")
                preferences << [type: 'List', key: node.getAttribute("app:key"), default: node.getAttribute("app:defaultValue"),
                                entries: entries.substring(7, entries.length()), values: values.substring(7, values.length())]
            }
            else if (node.nodeName == 'SwitchPreferenceCompat')
                preferences << [ type: 'Boolean',  key: node.getAttribute("app:key"), default: node.getAttribute("app:defaultValue") ]
        }

        def out = file('build/generated/java/com/termux/x11/Prefs.java')
        out.getParentFile().exists() || out.getParentFile().mkdirs()
        out.delete()
        out.createNewFile()

        out << 'package com.termux.x11;\n'
        out << 'import java.util.HashMap;\n'
        out << 'import com.termux.R;\n'
        out << 'import android.content.Context;\n'
        out << 'import com.termux.x11.utils.TermuxX11ExtraKeys;\n'
        out << '\n'
        out << 'public class Prefs extends LoriePreferences.PrefsProto {\n'
        preferences.each {
            if (it.type == 'Int' || it.type == 'Boolean')
                out << "  public final ${it.type}Preference ${it.key} = new ${it.type}Preference(\"${it.key}\", ${it.default});\n"
            else if (it.type == 'String')
                out << "  public final StringPreference ${it.key} = new StringPreference(\"${it.key}\", \"${it.default}\");\n"
            else if (it.type == 'List')
                out << "  public final ${it.type}Preference ${it.key} = new ${it.type}Preference(\"${it.key}\", \"${it.default}\", R.array.${it.entries}, R.array.${it.values});\n"
        }
        out << '  public final StringPreference extra_keys_config = new StringPreference("extra_keys_config", TermuxX11ExtraKeys.DEFAULT_IVALUE_EXTRA_KEYS);\n'
        out << '  public final HashMap<String, Preference> keys = new HashMap<String, Preference>() {{\n'
        preferences.each { out << '    put("' + it.key + '", ' + it.key + ');\n' }
        out << '    put("extra_keys_config", extra_keys_config);\n'
        out << '  }};\n'
        out << '\n'
        out << '  public Prefs(Context ctx) {\n'
        out << '    super(ctx);\n'
        out << '  }\n'
        out << '}\n'
    }
    android.sourceSets.main.java.srcDirs += 'build/generated/java'
    preBuild.dependsOn generatePrefs
    android.applicationVariants.all { variant ->
        variant.javaCompileProvider.get().dependsOn(downloadBootstraps)
    }
}
